{"version":3,"sources":["components/TopNavigation.js","components/Home.js","containers/Login.js","actions/authActions.js","containers/Logout.js","App.js","reducers/authReducer.js","store.js","registerServiceWorker.js","index.js"],"names":["TopNavigation","loginLink","loginText","this","props","auth","isAuthenticated","className","href","id","exact","to","Component","withRouter","connect","state","Home","Login","onFailure","error","alert","googleResponse","response","console","log","tokenId","options","method","body","Blob","JSON","stringify","type","mode","cache","fetch","config","GOOGLE_AUTH_CALLBACK_URL","then","r","json","user","token","login","content","pathname","clientId","GOOGLE_CLIENT_ID","buttonText","onSuccess","dispatch","dispath","payload","Logout","logout","About","NotFound","App","role","path","component","authReducer","action","createStore","combineReducers","applyMiddleware","createLogger","thunk","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","store","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.915e4206.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter, NavLink } from \"react-router-dom\";\n\nclass TopNavigation extends Component {\n    render() {\n        let loginLink = '/login';\n        let loginText = 'Login';\n        if (this.props.auth.isAuthenticated) {\n            loginLink = '/logout';\n            loginText = 'Logout';\n        }\n        else {\n            loginLink = '/login';\n            loginText = 'Login';\n        }\n        return (\n            <div>\n                <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n                    <a className=\"navbar-brand\" href=\"/\">CompanyName</a>\n                    <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item\">\n                                <NavLink exact className=\"nav-link\" to='/'>Home </NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink exact className=\"nav-link\" to='/about'>About </NavLink>\n                            </li>\n                            <li className=\"nav-item\">\n                                <NavLink exact className=\"nav-link\" to={loginLink}>{loginText} </NavLink>\n                            </li>\n                        </ul>\n                    </div>\n                </nav>\n            </div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        auth: state.auth\n    };\n};\n\nexport default withRouter(connect(mapStateToProps)(TopNavigation));","import React, { Component } from 'react';\n\nclass Home extends Component {\n    render() {\n        return (\n            <div><h1>Home</h1></div>\n        );\n    }\n};\n\nexport default Home;","import React, { Component } from 'react';\nimport { GoogleLogin } from 'react-google-login';\nimport { connect } from \"react-redux\";\nimport { login } from \"../actions/authActions\";\nimport config from '../config.json';\nimport { withRouter, Redirect } from \"react-router-dom\";\n\n\nclass Login extends Component {\n\n  onFailure = (error) => {\n    alert(error);\n  };\n\n  googleResponse = (response) => {\n    console.log(response);\n    if (!response.tokenId) {\n      console.error(\"Unable to get tokenId from Google\", response)\n      return;\n    }\n\n    const tokenBlob = new Blob([JSON.stringify({ tokenId: response.tokenId }, null, 2)], { type: 'application/json' });\n    const options = {\n      method: 'POST',\n      body: tokenBlob,\n      mode: 'cors',\n      cache: 'default'\n    };\n    fetch(config.GOOGLE_AUTH_CALLBACK_URL, options)\n      .then(r => {\n        r.json().then(user => {\n          const token = user.token;\n          console.log(token);\n          this.props.login(token);\n        });\n      })\n  };\n\n  render() {\n    let content = !!this.props.auth.isAuthenticated ?\n      (\n        <div>\n          <Redirect to={{\n            pathname: '/'\n          }} />\n        </div>\n      ) :\n      (\n        <div>\n          <GoogleLogin\n            clientId={config.GOOGLE_CLIENT_ID}\n            buttonText=\"Google Login\"\n            onSuccess={this.googleResponse}\n            onFailure={this.googleResponse}\n          />\n        </div>\n      );\n\n    return (\n      <div><h1>Login</h1>\n          {content}\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    auth: state.auth\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    login: (token) => {\n      dispatch(login(token));\n    }\n  }\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\n","export function login(token) {\n    return dispath => {\n        dispath({\n            type: \"LOGIN\",\n            payload: token\n        });\n    }\n}\n\nexport function logout() {\n    console.log(\"Logging out\");\n    return dispath => {\n        dispath({\n            type: \"LOGOUT\",\n            payload: \"\"\n        });\n    };\n}","import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport { withRouter, Redirect } from \"react-router-dom\";\nimport { logout } from \"../actions/authActions\";\n\nclass Logout extends Component {\n    componentWillMount(){\n        this.props.logout();\n    }\n\n    componentDidMount() {\n        //this.props.logout();\n    }\n\n    render(){\n        return(\n            <div><Redirect to={{\n                pathname: '/'\n            }} /></div>\n        );\n    }\n};\n\nconst mapStateToProps = (state) => {\n    return {\n      auth: state.auth\n    };\n  };\n  \n  const mapDispatchToProps = (dispatch) => {\n    return {\n      logout: () => {\n        dispatch(logout());\n      }\n    }\n  };\n  \n  export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Logout));","import React, { Component } from 'react';\nimport { Route, Switch } from \"react-router-dom\";\nimport TopNavigation from \"./components/TopNavigation\";\nimport Home from \"./components/Home\";\nimport Login from \"./containers/Login\";\nimport Logout from \"./containers/Logout\";\n\nconst About = () => (\n  <div><h1>About</h1></div>\n)\n\nconst NotFound = () => (\n  <div><h1>NotFound</h1></div>\n)\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <TopNavigation />\n        <main role=\"main\" className=\"container\">\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/about' component={About} />\n            <Route path='/login' component={Login} />\n            <Route path='/logout' component={Logout} />\n            <Route component={NotFound} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;","const authReducer = (state = {\n    user: '',\n    isAuthenticated: false\n}, action) => {\n    switch (action.type) {\n        case \"LOGIN\":\n            state = { ...state, user: action.payload, isAuthenticated: true };\n            break;\n        case \"LOGOUT\":\n            state = { ...state, user: '', isAuthenticated: false };\n            break;\n        default:\n            break;\n    };\n    return state;\n};\n\nexport default authReducer;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\nimport auth from \"./reducers/authReducer\";\n\nexport default createStore(combineReducers({\n    auth\n}),\n    {},\n    applyMiddleware(createLogger(), thunk)\n);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <Router>\n            <App />\n        </Router>\n    </Provider>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}